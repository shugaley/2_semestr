     1                                  section .text
     2                                  
     3                                  size_cell equ 8   ;sizeof one cell (of stack)
     4                                  size_mem  equ 1   ;one byte
     5                                  
     6                                  bin_mask  equ 0b00000001
     7                                  
     8                                  global _printfx
     9                                  ;--------------------------------------------------------
    10                                  ;
    11                                  ;--------------------------------------------------------
    12                                  
    13 00000000 415E                    _printfx:       pop r14
    14                                  
    15 00000002 4151                                    push r9
    16 00000004 4150                                    push r8
    17 00000006 51                                      push rcx
    18 00000007 52                                      push rdx
    19 00000008 56                                      push rsi
    20 00000009 57                                      push rdi
    21                                  
    22 0000000A 55                                      push rbp          ;saving rbp
    23 0000000B 4831ED                                  xor rbp, rbp
    24                                  
    25 0000000E 50                                      push rax          ;saving rax
    26 0000000F B808000000                              mov rax, size_cell
    27 00000014 BD02000000                              mov rbp, 2        ;2 = rax + rbp
    28 00000019 48F7E5                                  mul rbp
    29 0000001C 4801E0                                  add rax, rsp
    30 0000001F 4889C5                                  mov rbp, rax      ;rbp = ptr to prt to str in stack
    31 00000022 58                                      pop rax
    32                                  
    33 00000023 57                                      push rdi          ;saving reg
    34 00000024 56                                      push rsi
    35 00000025 50                                      push rax
    36 00000026 51                                      push rcx
    37 00000027 52                                      push rdx
    38 00000028 4152                                    push r10
    39 0000002A 4155                                    push r13
    40                                  
    41 0000002C 4150                                    push r8           ;saving r8
    42 0000002E 4989E0                                  mov r8, rsp
    43                                  
    44 00000031 E816000000                              call printfx
    45                                  
    46 00000036 4C89C4                                  mov rsp, r8
    47 00000039 4158                                    pop r8
    48                                  
    49 0000003B 415D                                    pop r13
    50 0000003D 415A                                    pop r10
    51 0000003F 5A                                      pop rdx
    52 00000040 59                                      pop rcx
    53 00000041 58                                      pop rax
    54 00000042 5E                                      pop rsi
    55 00000043 5F                                      pop rdi
    56                                                  ;pop rbp?????????????????
    57                                  ;??????????
    58                                  
    59 00000044 5D                                      pop rbp
    60 00000045 4883C430                                add rsp, size_cell * 6     ;size_cell * 6
    61                                  
    62                                  ;??????????
    63 00000049 4156                                    push r14
    64                                  
    65 0000004B C3                                      ret
    66                                  
    67                                  section .text
    68                                  
    69                                  global printfx
    70                                  ;-----------------------------------------------
    71                                  ;
    72                                  ;printfx == printf("str", op1, op2, ....)
    73                                  ;
    74                                  ;Entry:        ptr to str, op in stack
    75                                  ;              rbp - ptr to ptr to str in stack
    76                                  ;              rdi - ptr to str ???????????????
    77                                  ;              (rbp + size_cell ptr to op1 in stack, ...)
    78                                  ;
    79                                  ;               r8 == rsp (dont use!!!!!)
    80                                  ;               r14 - system (dont use!!!!!!)
    81                                  ;
    82                                  ;Destroy:      rdi rsi rax rcx rdx r10 r13
    83                                  ;
    84                                  ;Return:
    85                                  ;------------------------------------------------
    86                                  
    87 0000004C 4889FE                  printfx:        mov rsi, rdi   ;rsi = copy of ptr to str
    88                                  
    89 0000004F 4883C508                repeat:         add rbp, size_cell  ;rbp = ptr to now op in stack
    90 00000053 4889F7                                  mov rdi, rsi
    91                                  
    92 00000056 4831C0                                  xor rax, rax   ;finding %
    93 00000059 B825000000                              mov rax, '%'
    94 0000005E 53                                      push rbx
    95 0000005F E8C5010000                              call Strchr    ;rdi = [%]
    96 00000064 5B                                      pop rbx
    97                                  
    98 00000065 E894010000                              call Print_str   ;print from rsi to rdi
    99 0000006A 4801D6                                  add rsi, rdx     ;rsi = old rdi (rdi before Print_str)
   100                                  
   101 0000006D 4831C0                                  xor rax, rax     ;checking end of str
   102 00000070 8A06                                    mov al, [rsi]
   103 00000072 3C00                                    cmp al, 0
   104 00000074 7442                                    je exitt
   105                                  
   106 00000076 48FFC6                                  inc rsi         ;rsi = [%]++
   107 00000079 4831C0                                  xor rax, rax
   108 0000007C 8A06                                    mov al, [rsi]
   109                                  
   110 0000007E 3C25                                    cmp al, '%'     ;Switch print %
   111 00000080 7437                                    je p_perc
   112                                  
   113 00000082 4C8B5500                                mov r10, [rbp]   ; r10 = op
   114 00000086 41BD41000000                            mov r13, buf_size - 1 ;
   115                                  
   116 0000008C 48FFC6                                  inc rsi
   117 0000008F 56                                      push rsi            ;saving rsi, rdi
   118 00000090 57                                      push rdi
   119                                  
   120 00000091 3C63                                    cmp al, 'c'
   121 00000093 7438                                    je p_chr
   122                                  
   123 00000095 3C73                                    cmp al, 's'
   124 00000097 7463                                    je p_str
   125                                  
   126 00000099 4831C9                                  xor rcx, rcx
   127                                  
   128 0000009C 3C62                                    cmp al, 'b'
   129 0000009E 7474                                    je p_bin
   130                                  
   131 000000A0 3C64                                    cmp al, 'd'
   132 000000A2 0F8497000000                            je p_dec
   133                                  
   134 000000A8 3C6F                                    cmp al, 'o'
   135 000000AA 0F849D000000                            je p_oct
   136                                  
   137 000000B0 3C78                                    cmp al, 'x'
   138 000000B2 0F84BD000000                            je p_hex
   139                                  
   140                                  
   141                                  
   142                                  exitt:          ;...............
   143 000000B8 C3                                      ret
   144                                  
   145 000000B9 4889F7                  p_perc:         mov rdi, rsi
   146 000000BC 48FFC7                                  inc rdi
   147 000000BF E83A010000                              call Print_str
   148 000000C4 48FFC6                                  inc rsi
   149 000000C7 4883ED08                                sub rbp, size_cell
   150 000000CB EB82                                    jmp repeat
   151                                  
   152                                  
   153 000000CD 4831C0                  p_chr:          xor rax, rax
   154 000000D0 4C89D0                                  mov rax, r10
   155 000000D3 418885[00000000]                        mov [buf + r13], al
   156                                  
   157                                                  ;mov rsi, r13
   158                                                  ;mov rdi, rsi
   159                                                  ;add rdi, size_mem
   160                                                  ;call Print_str
   161                                  
   162 000000DA 4831C0                                  xor rax, rax
   163 000000DD 4C01E8                                  add rax, r13
   164 000000E0 4805[00000000]                          add rax, buf
   165                                  
   166 000000E6 4889C6                                  mov rsi, rax
   167 000000E9 4889F7                                  mov rdi, rsi
   168 000000EC 4883C701                                add rdi, size_mem
   169 000000F0 E809010000                              call Print_str
   170                                  
   171 000000F5 5F                                      pop rdi
   172 000000F6 5E                                      pop rsi
   173 000000F7 E953FFFFFF                              jmp repeat
   174                                  
   175 000000FC 488B7500                p_str:          mov rsi, [rbp]
   176 00000100 BF00000000                              mov rdi, 0
   177 00000105 E8F4000000                              call Print_str
   178                                  
   179 0000010A 5F                                      pop rdi
   180 0000010B 5E                                      pop rsi
   181 0000010C E93EFFFFFF                              jmp repeat
   182                                  
   183 00000111 90                                      NOP
   184 00000112 90                                      NOP
   185 00000113 90                                      NOP
   186                                  
   187 00000114 4831C0                  p_bin:          xor rax, rax
   188 00000117 4C89D0                                  mov rax, r10
   189 0000011A 48D3E8                                  shr rax, cl
   190                                  
   191 0000011D 4883F800                                cmp rax, 0
   192 00000121 0F84A8000000                            je p_end
   193                                  
   194 00000127 2401                                    and al, bin_mask
   195 00000129 0430                                    add al, '0'
   196                                  
   197 0000012B 418885[00000000]                        mov [buf + r13], al
   198                                  
   199 00000132 49FFCD                                  dec r13
   200 00000135 FEC1                                    inc cl
   201                                  
   202 00000137 80F940                                  cmp cl, 64
   203 0000013A 75D8                                    jne p_bin
   204                                  
   205 0000013C 90                                      NOP
   206 0000013D 90                                      NOP
   207 0000013E 90                                      NOP
   208                                  
   209 0000013F 4831C0                  p_dec:          xor rax, rax
   210 00000142 4C89D0                                  mov rax, r10
   211 00000145 41BA0A000000                            mov r10, 10
   212 0000014B EB50                                    jmp p_d_o_h_rep
   213                                  
   214 0000014D 4831C0                  p_oct:          xor rax, rax
   215 00000150 4C89D0                                  mov rax, r10
   216 00000153 41BA08000000                            mov r10, 8
   217 00000159 EB42                                    jmp p_d_o_h_rep
   218                                  
   219 0000015B 49FFCD                  p_oct_sign:     dec r13
   220 0000015E B26F                                    mov dl, 'o'
   221 00000160 418895[00000000]                        mov [buf + r13], dl
   222                                  
   223 00000167 49FFCD                                  dec r13
   224 0000016A B230                                    mov dl, '0'
   225 0000016C 418895[00000000]                        mov [buf + r13], dl
   226 00000173 EB66                                    jmp p_end_back
   227                                  
   228 00000175 4831C0                  p_hex:          xor rax, rax
   229 00000178 4C89D0                                  mov rax, r10
   230 0000017B 41BA10000000                            mov r10, 16
   231 00000181 EB1A                                    jmp p_d_o_h_rep
   232                                  
   233 00000183 49FFCD                  p_hex_sign:     dec r13
   234 00000186 B278                                    mov dl, 'x'
   235 00000188 418895[00000000]                        mov [buf + r13], dl
   236                                  
   237 0000018F 49FFCD                                  dec r13
   238 00000192 B230                                    mov dl, '0'
   239 00000194 418895[00000000]                        mov [buf + r13], dl
   240 0000019B EB3E                                    jmp p_end_back
   241                                  
   242                                  
   243 0000019D 4831D2                  p_d_o_h_rep:    xor rdx, rdx
   244 000001A0 49F7F2                                  div r10
   245                                  
   246 000001A3 4883FA09                                cmp rdx, 9
   247 000001A7 760A                                    jbe p_d_o_next
   248                                  
   249 000001A9 4883EA0A                                sub rdx, 10
   250 000001AD 4883C241                                add rdx, 'A'           ;ASCII number
   251 000001B1 EB04                                    jmp p_d_o_h_next
   252                                  
   253 000001B3 4883C230                p_d_o_next:     add rdx, '0'           ;ASCII number
   254                                  
   255 000001B7 418895[00000000]        p_d_o_h_next:   mov [buf + r13], dl    ;ASCII to buffer
   256                                  
   257 000001BE 4883F800                                cmp rax, 0
   258 000001C2 740B                                    je p_end
   259                                  
   260 000001C4 4983FD00                                cmp r13, 0
   261 000001C8 7405                                    je p_end
   262                                  
   263 000001CA 49FFCD                                  dec r13
   264 000001CD EBCE                                    jmp p_d_o_h_rep
   265                                  
   266                                  
   267 000001CF 4983FA08                p_end:          cmp r10, 8
   268 000001D3 7486                                    je p_oct_sign
   269                                  
   270 000001D5 4983FA10                                cmp r10, 16
   271 000001D9 74A8                                    je p_hex_sign
   272                                  
   273 000001DB 48BE-                   p_end_back:     mov rsi, buf
   273 000001DD [0000000000000000] 
   274 000001E5 4C01EE                                  add rsi, r13
   275 000001E8 48BF-                                   mov rdi, buf + buf_size
   275 000001EA [4200000000000000] 
   276 000001F2 E807000000                              call Print_str
   277                                  
   278 000001F7 5F                                      pop rdi
   279 000001F8 5E                                      pop rsi
   280 000001F9 E951FEFFFF                              jmp repeat
   281                                  
   282                                  
   283                                  
   284                                  section .bss
   285                                  
   286 00000000 <res 00000042>          buf:        resb 66
   287                                  buf_size:   equ $ - buf
   288                                  
   289                                  
   290                                  
   291                                  
   292                                  
   293                                  section .text
   294                                  
   295                                  global Print_str
   296                                  ;----------------------------------------------------
   297                                  ;
   298                                  ;Print_str - print str from 1st ptr to 2nd (or to the end it 2nd == 0)
   299                                  ;
   300                                  ;Entry:        rsi - ptr to str
   301                                  ;              rdi - ptr to the end of printed part of str (or == 0 if print to the end)
   302                                  ;
   303                                  ;Destroy:      rax rdi
   304                                  ;
   305                                  ;Return:       if rdi was 0 rdi = the end of str
   306                                  ;              rdx = rdi - rsi
   307                                  ;---------------------------------------------------------------
   308                                  
   309 000001FE 4883FF00                Print_str:      cmp rdi, 0
   310 00000202 7512                                    jne not_to_end
   311                                  
   312 00000204 4831C0                                  xor rax, rax
   313 00000207 B800000000                              mov rax, 0
   314 0000020C 53                                      push rbx
   315 0000020D 4889F7                                  mov rdi, rsi
   316 00000210 E814000000                              call Strchr     ;rdi = the end of str
   317 00000215 5B                                      pop rbx
   318                                  
   319 00000216 B801000000              not_to_end:     mov rax, 0x01
   320 0000021B 4889FA                                  mov rdx, rdi
   321 0000021E BF01000000                              mov rdi, 1
   322 00000223 4829F2                                  sub rdx, rsi
   323 00000226 0F05                                    syscall
   324                                  
   325 00000228 C3                                      ret
   326                                  
   327                                  
   328                                  section .text
   329                                  
   330                                  global Strchr
   331                                  ;------------------------------------------------
   332                                  ;
   333                                  ; strchr - find 1st char in str
   334                                  ;
   335                                  ; Expects:	rax - wanted char
   336                                  ;		        rdi - ptr to str
   337                                  ;
   338                                  ;
   339                                  ; Dstr:		  rbx
   340                                  ;
   341                                  ; Returns:	rdi - ptr to 1st char in str OR rdi == 0 if not found
   342                                  ;--------------------------------------------------
   343                                  
   344                                  Strchr:
   345                                  
   346 00000229 4831DB                  rep_strchr:   xor rbx, rbx
   347 0000022C 8A1F                                  mov bl, [rdi]
   348                                  
   349 0000022E 38C3                                  cmp bl, al
   350 00000230 740A                                  je found
   351                                  
   352 00000232 80FB00                                cmp bl, 0
   353 00000235 7406                                  je not_found
   354                                  
   355 00000237 48FFC7                                inc rdi
   356 0000023A EBED                                  jmp rep_strchr
   357                                  
   358 0000023C C3                      found:        ret
   359                                  
   360 0000023D 4831FF                  not_found:    xor rdi, rdi
   361 00000240 C3                                    ret
